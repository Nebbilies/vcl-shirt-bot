const { SlashCommandBuilder } = require('discord.js');
require('../../auth.js');
const SHEET_NAME = 'shirt';
const { getSpreadsheetData, updateSpreadsheetData } = require('./../modules/spreadsheetFunctions.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('order')
        .setDescription('Order a shirt'),
    execute: async (interaction) => {
        await interaction.reply({
            content: 'üì¨ M√¨nh ƒë√£ g·ª≠i b·∫°n m·ªôt tin nh·∫Øn ri√™ng, h√£y tr·∫£ l·ªùi m√¨nh ·ªü ƒë√≥ nh√©~!',
            ephemeral: true,
        });
        const questions = [
            { key: 'name', question: 'üë§**T√™n d·∫ßy ƒë·ªß** c·ªßa b·∫°n l√† g√¨?' },
            { key: 'size', question: 'üìè **Size** √°o b·∫°n mu·ªën? (XS, S, M, L, XL, XXL)' },
            { key: 'address', question: 'üè† **ƒê·ªãa ch·ªâ** nh·∫≠n √°o c·ªßa b·∫°n l√† g√¨?' },
            { key: 'phone', question: 'üìû **S·ªë ƒëi·ªán tho·∫°i** c·ªßa b·∫°n l√† g√¨?' },
            { key: 'color', question: 'üé® B·∫°n ch·ªçn m√†u **ƒë·ªè** hay **ƒëen**?' },
            { key: 'nickname', question: 'üè∑Ô∏è **Nickname** b·∫°n mu·ªën in tr√™n √°o l√† g√¨?' },
            { key: 'quote', question: 'üí¨ **Quote** b·∫°n mu·ªën in tr√™n √°o l√† g√¨? (Nh·∫Øn "skip" n·∫øu kh√¥ng c√≥)' },
        ];

        const channel = await interaction.user.createDM();
        const answers = {};
        await channel.send('>w< Tr·ª£ l√Ω ƒë·∫∑t √°o c·ªßa b·∫°n ƒë√¢y n√®~! M√¨nh s·∫Ω h·ªèi b·∫°n m·ªôt s·ªë th√¥ng tin ƒë·ªÉ ho√†n t·∫•t ƒë∆°n ƒë·∫∑t h√†ng nh√©, Mwah~!');
        for (const q of questions) {
            await channel.send(q.question);
            try {
                const collected = await channel.awaitMessages({
                    filter: m => m.author.id === interaction.user.id,
                    max: 1,
                    time: 60000,
                });

                answers[q.key] = collected.first().content;
            }
             catch (e) {
                return await channel.send('‚è∞ TwT M√¨nh ƒë·ª£i b·∫°n h∆°i l√¢u qu√°, b·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i l·ªánh `/order` nh√©!');
            }
        }
        await channel.send('UwU~ C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t √°o! Ch√∫ng m√¨nh ƒë√£ ghi nh·∫≠n th√¥ng tin c·ªßa b·∫°n r·ªìi nh√©!');

        const rows = await getSpreadsheetData(SHEET_NAME);
        console.log(rows);
        // edge case: undefined if no data, hence no rows.length
        let lastId = 0;
        if (/^\d+$/.test(rows[rows.length - 1][0]) === true) {
            lastId = parseInt(rows[rows.length - 1][0]);
        }
        const newRow = [
            (lastId + 1).toString(),
            interaction.user.id,
            answers.name,
            answers.size.toUpperCase(),
            answers.address,
            answers.phone,
            answers.color,
            answers.nickname,
            answers.quote.toLowerCase() === 'skip' ? '' : answers.quote,
            new Date().toLocaleString('en-US', { timeZone: 'Asia/Ho_Chi_Minh' }),
        ];
        const range = `'${SHEET_NAME}'!A${rows.length + 1}`;
        await updateSpreadsheetData(range, [newRow]);
    },
};